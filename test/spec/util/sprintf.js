'use strict';
var painless = require('../../assertion/painless')
var test = painless.createGroup('Test string/sprintf')
var t = painless.assert

var sprintf = require('../../../src/util/sprintf').sprintf
var pi = 3.141592653589793

test("should return formated strings for simple placeholders", function() {
  t.is("%", sprintf("%%"))
  t.is("10", sprintf("%b", 2))
  t.is("A", sprintf("%c", 65))
  t.is("2", sprintf("%d", 2))
  t.is("2", sprintf("%i", 2))
  t.is("2", sprintf("%d", "2"))
  t.is("2", sprintf("%i", "2"))
  t.is('{"foo":"bar"}', sprintf("%j", {foo: "bar"}))
  t.is('["foo","bar"]', sprintf("%j", ["foo", "bar"]))
  t.is("2e+0", sprintf("%e", 2))
  t.is("2", sprintf("%u", 2))
  t.is("4294967294", sprintf("%u", -2))
  t.is("2.2", sprintf("%f", 2.2))
  t.is("3.141592653589793", sprintf("%g", pi))
  t.is("10", sprintf("%o", 8))
  t.is("%s", sprintf("%s", "%s"))
  t.is("ff", sprintf("%x", 255))
  t.is("FF", sprintf("%X", 255))
  t.is("Polly wants a cracker", sprintf("%2$s %3$s a %1$s", "cracker", "Polly", "wants"))
  t.is("Hello world!", sprintf("Hello %(who)s!", {"who": "world"}))
  t.is("true", sprintf("%t", true))
  t.is("t", sprintf("%.1t", true))
  t.is("true", sprintf("%t", "true"))
  t.is("true", sprintf("%t", 1))
  t.is("false", sprintf("%t", false))
  t.is("f", sprintf("%.1t", false))
  t.is("false", sprintf("%t", ""))
  t.is("false", sprintf("%t", 0))

  t.is('undefined', sprintf('%T', undefined))
  t.is('null', sprintf('%T', null))
  t.is('boolean', sprintf('%T', true))
  t.is('number', sprintf('%T', 42))
  t.is('string', sprintf('%T', "This is a string"))
  t.is('function', sprintf('%T', Math.log))
  t.is('array', sprintf('%T', [1, 2, 3]))
  t.is('object', sprintf('%T', {foo: 'bar'}))
  t.is('regexp', sprintf('%T', /<("[^"]*"|'[^']*'|[^'">])*>/))

  t.is('true', sprintf('%v', true))
  t.is('42', sprintf('%v', 42))
  t.is('This is a string', sprintf('%v', "This is a string"))
  t.is('1,2,3', sprintf('%v', [1, 2, 3]))
  t.is('[object Object]', sprintf('%v', {foo: 'bar'}))
  t.is('/<("[^"]*"|\'[^\']*\'|[^\'">])*>/', sprintf('%v', /<("[^"]*"|'[^']*'|[^'">])*>/))
})

test("should return formated strings for complex placeholders", function() {
  // sign
  t.is("2", sprintf("%d", 2))
  t.is("-2", sprintf("%d", -2))
  t.is("+2", sprintf("%+d", 2))
  t.is("-2", sprintf("%+d", -2))
  t.is("2", sprintf("%i", 2))
  t.is("-2", sprintf("%i", -2))
  t.is("+2", sprintf("%+i", 2))
  t.is("-2", sprintf("%+i", -2))
  t.is("2.2", sprintf("%f", 2.2))
  t.is("-2.2", sprintf("%f", -2.2))
  t.is("+2.2", sprintf("%+f", 2.2))
  t.is("-2.2", sprintf("%+f", -2.2))
  t.is("-2.3", sprintf("%+.1f", -2.34))
  t.is("-0.0", sprintf("%+.1f", -0.01))
  t.is("3.14159", sprintf("%.6g", pi))
  t.is("3.14", sprintf("%.3g", pi))
  t.is("3", sprintf("%.1g", pi))
  t.is("-000000123", sprintf("%+010d", -123))
  t.is("______-123", sprintf("%+'_10d", -123))
  t.is("-234.34 123.2", sprintf("%f %f", -234.34, 123.2))

  // padding
  t.is("-0002", sprintf("%05d", -2))
  t.is("-0002", sprintf("%05i", -2))
  t.is("    <", sprintf("%5s", "<"))
  t.is("0000<", sprintf("%05s", "<"))
  t.is("____<", sprintf("%'_5s", "<"))
  t.is(">    ", sprintf("%-5s", ">"))
  t.is(">0000", sprintf("%0-5s", ">"))
  t.is(">____", sprintf("%'_-5s", ">"))
  t.is("xxxxxx", sprintf("%5s", "xxxxxx"))
  t.is("1234", sprintf("%02u", 1234))
  t.is(" -10.235", sprintf("%8.3f", -10.23456))
  t.is("-12.34 xxx", sprintf("%f %s", -12.34, "xxx"))
  t.is('{\n  "foo": "bar"\n}', sprintf("%2j", {foo: "bar"}))
  t.is('[\n  "foo",\n  "bar"\n]', sprintf("%2j", ["foo", "bar"]))

  // precision
  t.is("2.3", sprintf("%.1f", 2.345))
  t.is("xxxxx", sprintf("%5.5s", "xxxxxx"))
  t.is("    x", sprintf("%5.1s", "xxxxxx"))
})

test("should return formated strings for callbacks", function() {
  t.is("foobar", sprintf("%s", function() { return "foobar" }))
  t.eq(Date.now(), sprintf('%s', Date.now)) // should pass...
})
